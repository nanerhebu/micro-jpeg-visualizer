from struct import unpack
import math
from time import time
from numpy import zeros, uint8, ones
import cv2
import ToolKit

marker_mapping = {
	0xffd8: "__Start of Image",
	0xffe0: "__Application Default Header",	#FFE0-FFEF
	0xffe1: "__Application Default Header_E1_iPhone only use this",
	0xffdb: "__Quantization Table",
	0xffd0: "__Restart 0",	#FFD0-FFD7
	0xffd1: "__Restart 1",
	0xffd2: "__Restart 2",
	0xffd3: "__Restart 3",
	0xffd4: "__Restart 4",
	0xffd5: "__Restart 5",
	0xffd6: "__Restart 6",
	0xffd7: "__Restart 7",
	0xffdd: "__Define Restart Interval",
	0xffc0: "__Start of Frame, Base line DCT",
	0xffc4: "__Define Huffman Table",
	0xffda: "__Start of Scan",
	0xffd9: "__End of Image"
}

zigzag = [
	 0,  1,  8, 16,  9,  2,  3, 10,
	17, 24, 32, 25, 18, 11,  4,  5,
	12, 19,	26, 33, 40, 48, 41, 34,
	27, 20, 13,  6,  7, 14, 21, 28,
	35, 42, 49, 56, 57, 50, 43, 36,
	29, 22, 15, 23, 30, 37, 44, 51,
	58, 59, 52, 45, 38, 31, 39, 46,
	53, 60, 61, 54, 47, 55, 62, 63]

#zigzag = [
#     0,  1,  5,  6, 14, 15, 27, 28,
#     2,  4,  7, 13, 16, 26, 29, 42,
#     3,  8, 12, 17, 25, 30, 41, 43,
#     9, 11, 18, 24, 31, 40, 44, 53,
#    10, 19, 23, 32, 39, 45, 52, 54,
#    20, 22, 33, 38, 46, 51, 55, 60,
#    21, 34, 37, 47, 50, 56, 59, 61,
#    35, 36, 48, 49, 57, 58, 62, 63]


class Stream:
# convert a string into a bit stream
	def __init__(self, data):
		self.data= data
		self.pos = 0

	def GetBit(self):	#读取1比特，地址记录在pos上
		b = self.data[self.pos >> 3]
		s = 7-(self.pos & 0x7)
		self.pos += 1
		return (b >> s) & 1

	def GetBitN(self, L):	#读取L比特
		val = 0
		for i in range(L):
			val = val*2 + self.GetBit()
		return val


class IDCT:
# helps build a MCU matrix
	def __init__(self):
		self.base = [0]*64

	def NormCoeff(self, n):
		return math.sqrt( 1.0/8.0) if (n==0) else math.sqrt( 2.0/8.0)

	def AddIDC(self, n,m, coeff):
		an = self.NormCoeff(n)
		am = self.NormCoeff(m)

		for y in range(0,8):
			for x in range(0,8):
				nn = an*math.cos( n* math.pi * (x +.5)/8.0 )
				mm = am*math.cos( m* math.pi * (y +.5)/8.0 )
				self.base[x+y*8] += nn*mm*coeff

	def AddZigZag(self, zi, coeff):
		i = zigzag[zi]
		n = i & 0x7
		m = i >> 3
		self.AddIDC( n,m, coeff)


class HuffmanTable:
    #A Huffman Table class
    def __init__(self):
        self.root = []
        self.elements = []

    def BitsFromLengths(self, root, element, pos):
        if isinstance(root, list):
            if pos == 0:
                if len(root) < 2:
                    root.append(element)
                    return True
                return False
            for i in [0, 1]:
                if len(root) == i:
                    root.append([])
                if self.BitsFromLengths(root[i], element, pos - 1) == True:
                    return True
        return False

    def GetHuffmanBits(self, lengths, elements):
        self.elements = elements
        ii = 0
        for i in range(len(lengths)):
            for j in range(lengths[i]):
                self.BitsFromLengths(self.root, elements[ii], i)
                ii += 1

    def Find(self, st):
        r = self.root
        #如果r是list，则
        while isinstance(r, list):
            r = r[st.GetBit()]
        return r

    def GetCode(self, st):
        while True:
            #print(st.len())
            res = self.Find(st)
            #print(res)
            if res == 0:
                return 0
            elif res != -1:
                return res


class JPEG:
	def __init__(self, image_file):
		with open(image_file, 'rb') as f:
			self.huffman_tables = {}
			self.quant = {}
			self.quantMapping = []
			self.HV_Sample = ones((3, 2), dtype=int)
			self.img_data = f.read()
			self.width = 0
			self.height = 0
			self.DRI = 0
			self.ADScounter = 0
			print(image_file, "open success")

	def BuildMatrix(self, st, idx, quant, olddccoeff):	
		i = IDCT()	
		code = self.huffman_tables[0+idx].GetCode(st)
		bits = st.GetBitN(code)
		dccoeff = ToolKit.DecodeNumber(code, bits) + olddccoeff

		i.AddZigZag(0,(dccoeff) * quant[0])
		l = 1
		while(l<64):
			code = self.huffman_tables[16+idx].GetCode(st) 
			if code == 0:
				break
			if code >15:
				l += (code>>4)
				code = code & 0xf
			
			bits = st.GetBitN(code)

			if l<64:
				coeff  =  ToolKit.DecodeNumber(code, bits) 
				i.AddZigZag(l,coeff * quant[l])
				l += 1
		return i, dccoeff

	def DRICal(self, st, oldlumdccoeff, oldCbdccoeff, oldCrdccoeff):

		
		DRIimage = zeros((self.DRI, self.Height_Unit*8, self.Width_Unit*8, 3))

		for i in range(DRI):
			# decode 8x8 block
			for zx in range(self.hv_sample[0,0]):
				for zy in range(self.hv_sample[0,1]):
					matl, oldlumdccoeff = self.buildmatrix(st,0, self.quant[self.quantmapping[0]], oldlumdccoeff)
					for xx in range(8):
						for yy in range(8):
							for ux in range(self.width_unit//self.hv_sample[0,0]):
								for uy in range(self.height_unit//self.hv_sample[0,1]):
									DRIimage[i,zy*8+yy*self.height_unit//self.hv_sample[0,1]+uy, zx*8+xx*self.width_unit//self.hv_sample[0,0]+ux,0] = matl.base[xx+yy*8]
			for zx in range(self.hv_sample[1,0]):
				for zy in range(self.hv_sample[1,1]):
					matcr, oldcrdccoeff = self.buildmatrix(st,1, self.quant[self.quantmapping[1]], oldcrdccoeff)
					for xx in range(8):
						for yy in range(8):
							for ux in range(self.width_unit//self.hv_sample[1,0]):
								for uy in range(self.height_unit//self.hv_sample[1,1]):
									DRIimage[i,zy*8+yy*self.height_unit//self.hv_sample[1,1]+uy, zx*8+xx*self.width_unit//self.hv_sample[1,0]+ux,1] = matcr.base[xx+yy*8]
			for zx in range(self.hv_sample[2,0]):
				for zy in range(self.hv_sample[2,1]):
					matcb, oldcbdccoeff = self.buildmatrix(st,1, self.quant[self.quantmapping[2]], oldcbdccoeff)
					for xx in range(8):
						for yy in range(8):
							for ux in range(self.width_unit//self.hv_sample[2,0]):
								for uy in range(self.height_unit//self.hv_sample[2,1]):
									DRIimage[i,zy*8+yy*self.height_unit//self.hv_sample[2,1]+uy, zx*8+xx*self.width_unit//self.hv_sample[2,0]+ux,2] = matcb.base[xx+yy*8]

		return DRIimage

	def StartOfScan(self, data, hdrlen):
		#将0xFF后的0x00去掉, lenchunk是去掉00之后的数据长度
		lenchunk = hdrlen
		self.ADScounter = self.ADScounter + hdrlen
		#print(type(data))
		#print(len(data))
		oldlumdccoeff, oldCbdccoeff, oldCrdccoeff = 0, 0, 0
		#哪个是宽哪个是高
		#print(self.HV_Sample)
		#print(self.Height_Unit,self.Width_Unit)

		marker = 0xffd0
		j = 0

		while (marker >= 0xffd0 and marker <= 0xffd7):

			data_pack, Len = ToolKit.RemoveFF00(data[lenchunk:])
			st = Stream(data_pack)
			lenchunk = lenchunk + Len
			self.ADScounter = self.ADScounter + Len

			DRIimage = self.DRICal(st, oldlumdccoeff, oldCbdccoeff, oldCrdccoeff)	

			jj = j*self.Height_Unit*8
			for i in range(DRI):
				wedge = DRI*self.Width_Unit*8
				for y in range(self.Height_Unit*8):
					for x in range(self.Width_Unit*8):
						self.image = [jj+y, wedge+x, 3] = DRIimage[]

			j+=1


			marker, = unpack(">H", data[lenchunk:lenchunk+2])
			print("marker %02X, ADS "%marker, hex(self.ADScounter), marker_mapping.get(marker))
			lenchunk += 2
			self.ADScounter +=2

		print(st.pos)
		aa = st.GetBitN(8)
		print("%02X"%aa)
		print(st.pos)

		
		#image1 = Image.fromarray(self.image[0:16,:,:]).convert('RGB')
		image1 = Image.fromarray(self.image[0:16,:,:]).convert('YCrCb')
		#imageA = Image.new('L', (16*3, 16*252)) #创建成品图的画布
		#imageA = zeros((16 * 3, self.width, 1), uint8)
		#imageA[0:16,:,0] = self.image[0:16,:,0]
		#imageA[16:32,:,0] = self.image[0:16,:,1]
		#imageA[32:48,:,0] = self.image[0:16,:,2]
		#image1 = Image.fromarray(image1).convert('RGB')
		image1 = Image.fromarray(image1).convert('YCrCb')
		image1.show() 
		print("1")
		#return的好像不对。lenchunk是替换掉00后的数据长度。
		return lenchunk + hdrlen


	def DefineHuffmanTables(self, data):
		while(len(data)>0):
			offset = 0
			hdr, = unpack("B",data[offset : offset + 1])
			offset += 1 

			#这里用"B"*16代替原程序里的GetArray循环16次
			lengths = unpack("B"*16, data[offset:offset+16]) 
			offset += 16

			elements = []
			for i in lengths:
				elements += unpack("B"*i, data[offset:offset+i])
				offset = offset + i 

			hf = HuffmanTable()
			hf.GetHuffmanBits(lengths, elements)
			self.huffman_tables[hdr] = hf

			print("Header: ", hdr)
			print("lengths: ", lengths)
			print("Elements: ", len(elements))
			data = data[offset:]


	def BaselineDCT(self, data):
		hdr, self.height, self.width, Num_Components = unpack(">BHHB",data[0:6])
		print("size %ix%i" % (self.width,  self.height))
		print("hdr %i, Num_Components %i" % (hdr, Num_Components))
		#self.image = [0] * (self.width * self.height);
		self.image = zeros((self.height, self.width, 3), uint8)
		for i in range(Num_Components):
			id, HV, QtbId = unpack("BBB",data[6+i*3:9+i*3])
			#样本因子H和V是4bits无符号整数，但unpack最小只能取8bits，所以用位处理把HV拆成4bits。
			#print(hdr >>4, hdr & 0xf)
			H = HV >> 4
			V = HV & 0xf
			self.HV_Sample[id-1, 0], self.HV_Sample[id-1, 1] = H, V
			self.quantMapping.append(QtbId) 

		self.Width_Unit = max(self.HV_Sample[0,0],self.HV_Sample[1,0],self.HV_Sample[2,0])
		self.Height_Unit = max(self.HV_Sample[0,1],self.HV_Sample[1,1],self.HV_Sample[2,1])



	def DefineQuantizationTables(self, data):
		while(len(data)>0):
			hdr, = unpack("B",data[0:1])
			#前4bits是下面量化表的精度标识，0是8bits精度，1是16bits精度
			#后4bits是目的标识
			#print(hdr >>4, hdr & 0xf)
			self.quant[hdr & 0xf] = unpack("B"*64, data[1:1 + 64]) 
			#PrintMatrix(self.quant[hdr & 0xf])
			data = data[65:]

	def decode(self):
		data = self.img_data
		self.ADScounter = 0
		while(True):
			marker, = unpack(">H", data[0:2])
			print("marker %02X, ADS "%marker, hex(self.ADScounter), marker_mapping.get(marker))
			if  marker == 0xffd8:
				len_chunk = 2
			elif marker == 0xffd9:
				return (self.width, self.height, self.image)
			else:
				len_chunk, = unpack(">H", data[2:4])
				len_chunk += 2
				chunk = data[4:len_chunk]

				if marker == 0xFFDB:
					self.DefineQuantizationTables(chunk)
				elif marker == 0xFFDD:
					self.DRI, = unpack(">H", data[4:6])
				elif marker == 0xFFC0:
					self.BaselineDCT(chunk)
				elif marker == 0xFFC4:
					self.DefineHuffmanTables(chunk)
				elif marker == 0xFFDA:
					#data1,lenchunk = ToolKit.RemoveFF00(data[len_chunk:])
					len_chunk = self.StartOfScan(data, len_chunk)
					#len_chunk = self.StartOfScan(data, len_chunk)
				#elif (marker >= 0xffd0 and marker <= 0xffd7):
				#	data1,lenchunk = ToolKit.RemoveFF00(data[2:])
				#	len_chunk = lenchunk + 2
					#print(len_chunk)
					#print(len(data1))
					#print()
			data = data[len_chunk:]
			self.ADScounter = self.ADScounter + len_chunk
			if len(data)==0:
				break		
		
		print("Unexpected Endding")
		return (9999,9999,[])

	def IMG(self):
		return (self.image)

if __name__ == "__main__":
	
	from PIL import Image

	#我的这个苹果文件，一共189行，一行的高度是16, 16*189=3024。DRI=252，也就是一行的宽度
	#Address = r'D:/Python/IMG_0401.JPG'
	Address = r'F:/PyFile/Visibility_Photo/IMG_0401.JPG'
	#Address = r'F:/PyFile/test.jpg' 

	img = JPEG(Address)

	width, height, image = img.decode()
	
	#image1 = Image.new("RGB", (width, height))

	image1 = Image.fromarray(image).convert('RGB')
	image1.show() 
